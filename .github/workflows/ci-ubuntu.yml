name: github-ci-ubuntu

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install boost
        uses: MarkusJx/install-boost@v2.4.5
        id: install-boost
        with:
          # REQUIRED: Specify the required boost version
          # A list of supported versions can be found here:
          # https://github.com/actions/boost-versions/blob/main/versions-manifest.json
          boost_version: 1.86.0
          # OPTIONAL: Specify a platform version
          platform_version: 20.04

      - name: Install gtk
        run:
          sudo apt-get update -qq &&
          sudo apt-get install liblzma5 libjbig0 libgtk-3-dev

      - name: Install gcc, lcov, gdb, theme-icon
        # gcov version should match gcc version: change build-gen.sh as well
        run: sudo apt-get install -yq gcc-14 g++-14 lcov gdb yaru-theme-icon

      - name: Install xvfb to allow headless tests
        run: sudo apt-get install xvfb

      - name: Install ninja
        run: sudo apt-get install ninja-build

      - name: Install coveralls
        run: sudo curl -L https://coveralls.io/coveralls-linux.tar.gz | tar -xz -C /usr/local/bin

      - name: Install robotframework
        run: sudo pip install robotframework

      - name: Configure for coverage
        # adding -s samples switch should result in app running,
        # but then the headless test keeps on running
        run: ./build-gen.sh -b -c -g -p -t -B ${{steps.install-boost.outputs.BOOST_ROOT}}
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
          CC: gcc-14
          CXX: g++-14

      - name: Make using ninja
        run: cd build && ninja

      # Upload the del binary, which we will need to debug the core
      - uses: actions/upload-artifact@v4
        with:
          name: executable
          path: build/test/del/wex-test-del

      - name: Set cores to get stored in /cores
        run: |
          sudo mkdir /cores
          sudo chmod 777 /cores
          # Core filenames will be of the form executable.pid.timestamp:
          sudo bash -c 'echo "/cores/%e.%p.%t" > /proc/sys/kernel/core_pattern'

      - name: Headless test
        run: |
          ulimit -c unlimited
          cd build
          ninja lcov-prep
          xvfb-run --auto-servernum ctest -VV
          ninja lcov
        env:
          NO_AT_BRIDGE: 1

      - name: Artifact coredump
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}  # Run only if something went wrong
        with:
          name: coredump
          path: /cores

      - name: Coveralls
        run: cd build && coveralls -r 9vV6skuIGeagBBkz5TCZNI12ezUv12gOj --format=lcov --file=src/app.run

      - name: Cleanup
        run: rm -rf build

      - name: Reconfigure and build for artifacts without testing
        run: ./build-gen.sh -b -g -B ${{steps.install-boost.outputs.BOOST_ROOT}}
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
          CC: gcc-14
          CXX: g++-14

      - name: Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wex-lib-ubuntu
          path: |
            data/*.xml
            build/**/*.a
            build/**/setup.h

<?xml version="1.0" encoding="UTF-8"?>
<!--
Name:      wex-macros.xml
Purpose:   vi macros, variables, abbreviations and key maps for wex.
Author:    Anton van Wezenbeek
Copyright: (c) 2019, Anton van Wezenbeek

Both variables and macros have a "name" attribute, you call them
from vi mode using @name@ (if name starts with an
uppercase letter). If the name is a register c, you can call it
using @c (lowercase). From vi you can record a register using q 
followed by a letter, and ending with a q as well.
  
An abbreviation is expanded during insertion when you enter
the text. From vi you can enter an abbreviation using :ab.

A key map allows you to use your owh shortcuts for vi or ex
commands. From vi you can enter a map using :map.

Each macro can have several commands.  

Variables are expanded when playing back the macro. 
- A variable can have a "type" attribute.
  The next "type" values are supported:
  - BUILTIN:     
    Expansion is done using internal value, so you cannot add your own.
  - ENVIRONMENT: 
    Expansion is done using environment value, you can add your own,
    as long as they are part of the environment variables.
  - INPUT:       
    Expansion is done by asking value from user. You can add your own.
  - INPUT-ONCE:  
    Expansion is done by asking value from user, value is saved.
    The next time this value is used for expansion, no input is asked for.
    You can add your own.
  - INPUT-SAVE:  
    Expansion is done by asking value from user, value is saved.
    You can add your own.
    This is the default value when you add your own variable from vi.
  - TEMPLATE:
    Expansion is done by reading the value from a template file. This
    file is specified in the contents of the node. In the file you
    can use macro variables as well.
  
  If you do not specify this attribute, then the variable is expanded
  to the xml contents as specified here.
  Finally a variable can be intialized using another variable 
  using the @OTHER@ as contents for that variable referring
  to the OTHER variable to for intialization. E.g. see the Copyright variable.
  
- A variable can have a "prefix" attribute. 
  This attribute causes a comment line to be generated that is prefixed with
  the value of this attribute, according to the "type" attribute.
-->
<macros>
  <!-- BUILTIN type -->
  <!-- Expands to Comment Begin according to current lexer -->
  <variable name="Cb"               type="BUILTIN"/>
  <!-- Expands to Comment Complete according to current lexer -->
  <variable name="Cc"               type="BUILTIN"/>
  <!-- Expands to Comment End according to current lexer -->
  <variable name="Ce"               type="BUILTIN"/>
  <!-- Expands to Comment Line according to current lexer -->
  <variable name="Cl"               type="BUILTIN"/>
  <!-- Expands to creation date current filename -->
  <variable name="Created"          type="BUILTIN"/>
  <!-- Expands to current date -->
  <variable name="Date"             type="BUILTIN"/>
  <!-- Expands to current datetime -->
  <variable name="Datetime"         type="BUILTIN"/>
  <!-- Expands to current filename without extension-->
  <variable name="Filename"         type="BUILTIN"/>
  <!-- Expands to current filename -->
  <variable name="Fullname"         type="BUILTIN" />
  <!-- Expands to current filename fullpath -->
  <variable name="Fullpath"         type="BUILTIN"/>
  <!-- Expands to new line according to current document type -->
  <variable name="Nl"               type="BUILTIN"/>
  <!-- Expands to current filename path only -->
  <variable name="Path"             type="BUILTIN"/>
  <!-- Expands to current time -->
  <variable name="Time"             type="BUILTIN"/>
  <!-- Expands to current year -->
  <variable name="Year"             type="BUILTIN"/>
  
  <!-- ENVIRONMENT type -->
  <variable name="HOME"             type="ENVIRONMENT"/>
  <variable name="PWD"              type="ENVIRONMENT"/>
  
  <!-- INPUT-ONCE type -->
  <variable name="Author"           type="INPUT-ONCE"/>
  <variable name="Author:"          type="INPUT-ONCE" prefix="Author:    "/>
  <variable name="Copyright"        type="INPUT-ONCE">@Author:@</variable>

  <!-- INPUT-SAVE type -->
  <variable name="Purpose"          type="INPUT-SAVE" prefix="WRAP"/>
  <variable name="Purpose:"         type="INPUT-SAVE" prefix="Purpose:   "/>
  
  <!-- TEMPLATE type -->
  <!-- A C Header Template -->  
  <variable name="Cht"              type="TEMPLATE">wex-cht.txt</variable>
  
  <!-- A macro to test coverage: run in a .h file,
       it finds corresponding method in a test.cpp file -->
  <macro name="Coverage">
    <command>/ +[a-z_]+\(</command>
    <command>bb</command>
    <command>*</command>
    <command>:prev</command>
    <command>n</command>
    <command>:n</command>
    <command>&#13;</command>
  </macro>
  
  <!-- A header macro -->
  <macro name="Hdr">
    <command>gg</command>
    <command>O</command>
    <command>"&#27;"</command>
    <command>@Cl@</command>
    <command>o</command>
    <command>&#27;</command>
    <command>@Cb@</command>
    <command>i Name:      </command>
    <command>&#27;</command>
    <command>@Fullname@</command>
    <command>&#27;</command>
    <command>i&#18;</command>
    <command>&#27;</command>
    <command>@Cc@</command>
    <command>o</command>
    <command>&#27;</command>
    <command>@Purpose:@</command>
    <command>o</command>
    <command>&#27;</command>
    <command>@Author:@</command>
    <command>o</command>
    <command>&#27;</command>
    <command>@Cb@</command>
    <command>i Copyright: (c) </command>
    <command>&#27;</command>
    <command>@Year@</command>
    <command>i </command>
    <command>&#27;</command>
    <command>@Copyright@</command>
    <command>@Cc@</command>
    <command>o</command>
    <command>&#27;</command>
    <command>@Cl@</command>
    <command>o</command>
    <command>&#27;</command>
  </macro>
  
  <!-- An abbreviation macro -->
  <abbreviation name="CR">Copyright</abbreviation>

  <!-- An alt key macro for alt key chars -->
  <map-alt name="B">:!bash</map-alt>
  <map-alt name="G">:grep -r</map-alt>

  <!-- A map macro (for ex macro's) -->
  <map name=":A">:abb</map>
  <map name=":M">:map</map>

  <!-- A control key macro for control chars outside normal range -->
  <map-control name="]">Q</map-control>

  <!-- A key macro for ascii characters, including ctrl-a etc. -->
  <!-- control g -->
  <map-key name="7">:f</map-key>
  <!-- ampersand -->
  <map-key name="38">:.&amp;</map-key>
  <map-key name="D">d$</map-key>
  <map-key name="Y">yy</map-key>
</macros>
